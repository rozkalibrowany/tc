#include <stdio.h>
#include <Packet.h>
#include <iostream>
#include <sstream>
#include <string>

using namespace parser;

int hex_value(unsigned char hex_digit)
{
    static const signed char hex_values[256] = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,
        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    };
    int value = hex_values[hex_digit];
    if (value == -1) throw std::invalid_argument("invalid hex digit");
    return value;
}

std::string hex_to_string(const std::string& input)
{
    const auto len = input.length();
    if (len & 1) throw std::invalid_argument("odd length");

    std::string output;
    output.reserve(len / 2);
    for (auto it = input.begin(); it != input.end(); )
    {
        int hi = hex_value(*it++);
        int lo = hex_value(*it++);
        output.push_back(hi << 4 | lo);
    }
    return output;
}

int main(int argc, char** argv) {

  std::string str("00000000000004af8e0d0000017dffed5e30000c9745bf1f1ca0db004701061600000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffe8ca50000c9745bf1f1ca10d004801061500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffe43670000c9745ae1f1ca12e004701061600000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffdfa290000c9745181f1ca160004501061500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffdb0eb0000c97454a1f1ca192004701061600000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffd67ad0000c97456c1f1ca218004a01061400000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffd1e6f0000c9745291f1ca228004900dd1500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000384001640001e2b3000000010153000e4e325a42483138353143303036380000017dffcd5310000c97454a1f1ca249004800dd1500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000391c01640001e2b3000000010153000e4e325a42483138353143303036380000017dffc8bf30000c9744f71f1ca27c004800dd1500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000391c01640001e2b3000000010153000e4e325a42483138353143303036380000017dffc42b50000c9744f71f1ca29d004800dd1400000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000391c01640001e2b3000000010153000e4e325a42483138353143303036380000017dffbf9770000c9744b41f1ca2cf004800dd1500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000391c01640001e2b3000000010153000e4e325a42483138353143303036380000017dffbb0390000c9744721f1ca249004d00dd1500000000000a0006007164015500015801015d000160200163000000000300100001e2b301620000391c01640001e2b3000000010153000e4e325a42483138353143303036380000017dffb66fb0000c9745391f1ca239004d01531500000000000a0006007164015500015801015d000160210163000000000300100001e2b3016200003a0201640001e2b3000000010153000e4e325a42483138353143303036380d00");
      //"");
  std::string fromHex = hex_to_string(str);


  unsigned char v[fromHex.length() + 1];
  std::copy(fromHex.data(), fromHex.data() + fromHex.length() + 1, v);

  Packet packet;
  packet.parse(v, (size_t) fromHex.length());


  return 0;

}
